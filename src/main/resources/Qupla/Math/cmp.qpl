// LUT logic: return (trit1 < trit2) ? - : (trit1 > trit2) ? 1 : 0;
lut cmp {
  -,- = 0
  0,- = 1
  1,- = 1
  -,0 = -
  0,0 = 0
  1,0 = 1
  -,1 = -
  0,1 = -
  1,1 = 0
}

// LUT logic: return (Bool) (trit1 < 0)
lut isLess {
  - = 1
  0 = -
  1 = -
}

// LUT logic: return (Bool) (trit1 > 0)
lut isGreater {
  - = -
  0 = -
  1 = 1
}

// LUT logic: return (Bool) (trit1 == 0)
lut isEqual {
  - = -
  0 = 1
  1 = -
}

// LUT logic: return (Bool) (trit1 >= 0)
lut notLess {
  - = -
  0 = 1
  1 = 1
}

// LUT logic: return (Bool) (trit1 <= 0)
lut notGreater {
  - = 1
  0 = 1
  1 = -
}

// LUT logic: return (Bool) (trit1 != 0)
lut notEqual {
  - = 1
  0 = -
  1 = 1
}


// returns (Bool) ((lhs < rhs) ? - : (lhs > rhs) ? 1 : 0)

func Trit cmp<Trit> (Trit lhs, Trit rhs) {
  return cmp[lhs, rhs]
}

template cmp<T> {
  type P [T / 3]

  func Trit cmp<T> (T lhs, T rhs) {
    return sign[cmp<P>(lhs[P * 0 : P], rhs[P * 0 : P]),
                cmp<P>(lhs[P * 1 : P], rhs[P * 1 : P]),
                cmp<P>(lhs[P * 2 : P], rhs[P * 2 : P])]
  }
}

use cmp<Tryte>, <Tiny>, <Int>, <Huge>, <Hash>

template cmp2<T> {
  type P [T / 2]

  func Trit cmp<T> (T lhs, T rhs) {
    return sign[cmp<P>(lhs[P * 0 : P], rhs[P * 0 : P]),
                cmp<P>(lhs[P * 1 : P], rhs[P * 1 : P]),
                0]
  }
}

use cmp2<Tryte2>, <Tiny2>, <Tiny4>, <Int2>, <Huge2>

// test statements

test 0 = cmp<Int>(-1, -1)
test - = cmp<Int>(-1, 0)
test - = cmp<Int>(-1, 1)
test 1 = cmp<Int>(0, -1)
test 0 = cmp<Int>(0, 0)
test - = cmp<Int>(0, 1)
test 1 = cmp<Int>(1, -1)
test 1 = cmp<Int>(1, 0)
test 0 = cmp<Int>(1, 1)
test - = cmp<Int>(10, 20)
test - = cmp<Int>(-30, 40)
test 1 = cmp<Int>(50, -60)
test 1 = cmp<Int>(-70, -80)
test 0 = cmp<Int>(90, 90)
